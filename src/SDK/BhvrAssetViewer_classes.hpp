#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BhvrAssetViewer

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "BhvrAssetViewer_structs.hpp"


namespace SDK
{

// Class BhvrAssetViewer.BhvrAssetEnvironmentSystem
// 0x0048 (0x02E8 - 0x02A0)
class ABhvrAssetEnvironmentSystem final : public AActor
{
public:
	struct FDirectoryPath                         EnvironmentsPath;                                  // 0x02A0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              SelectedEnvironmentChanged;                        // 0x02B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FAssetData>                     EnvironmentAssetDatas;                             // 0x02C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	class FName                                   SelectedEnvironmentName;                           // 0x02D0(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelStreamingDynamic*                 LoadedEnvironment;                                 // 0x02E0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SelectEnvironment(const class FString& InDisplayName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BhvrAssetEnvironmentSystem">();
	}
	static class ABhvrAssetEnvironmentSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABhvrAssetEnvironmentSystem>();
	}
};

// Class BhvrAssetViewer.BhvrAssetLightGroup
// 0x0028 (0x0058 - 0x0030)
class UBhvrAssetLightGroup final : public UObject
{
public:
	bool                                          bIsEnabled;                                        // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IntensityMultiplier;                               // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class ULightComponent*>                Lights;                                            // 0x0038(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x10];                                      // 0x0048(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetIntensityMultiplier(float NewIntensityMultiplier);
	void SetIsEnabled(bool bNewValue);

	float GetIntensityMultiplier() const;
	bool GetIsEnabled() const;
	bool HasLights() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BhvrAssetLightGroup">();
	}
	static class UBhvrAssetLightGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBhvrAssetLightGroup>();
	}
};

// Class BhvrAssetViewer.BhvrAssetLightingRig
// 0x0028 (0x02C8 - 0x02A0)
class ABhvrAssetLightingRig final : public AActor
{
public:
	class UBhvrAssetLightGroup*                   KeyLightGroup;                                     // 0x02A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBhvrAssetLightGroup*                   FillLightGroup;                                    // 0x02A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBhvrAssetLightGroup*                   RimLightGroup;                                     // 0x02B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBhvrAssetLightGroup*                   KickLightGroup;                                    // 0x02B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBhvrAssetLightGroup*                   FogLightGroup;                                     // 0x02C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AddFillLight(class ULightComponent* InLight);
	void AddFogLight(class ULightComponent* InLight);
	void AddKeyLight(class ULightComponent* InLight);
	void AddKickLight(class ULightComponent* InLight);
	void AddRimLight(class ULightComponent* InLight);

	class FString GetDisplayName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BhvrAssetLightingRig">();
	}
	static class ABhvrAssetLightingRig* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABhvrAssetLightingRig>();
	}
};

// Class BhvrAssetViewer.BhvrAssetLightingSystem
// 0x0038 (0x02D8 - 0x02A0)
class ABhvrAssetLightingSystem final : public AActor
{
public:
	TMulticastInlineDelegate<void()>              SelectedLightingRigChanged;                        // 0x02A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FDirectoryPath                         LightingRigsPath;                                  // 0x02B0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ABhvrAssetLightingRig*>          LightingRigs;                                      // 0x02C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	class ABhvrAssetLightingRig*                  SelectedLightingRig;                               // 0x02D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SelectLightingRig(const class FString& InDisplayName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BhvrAssetLightingSystem">();
	}
	static class ABhvrAssetLightingSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABhvrAssetLightingSystem>();
	}
};

// Class BhvrAssetViewer.BhvrAssetViewCamera
// 0x00E0 (0x0408 - 0x0328)
class ABhvrAssetViewCamera final : public APawn
{
public:
	class UBhvrAssetViewSpringArmComponent*       SpringArm;                                         // 0x0328(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraComponent*                       Camera;                                            // 0x0330(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PanFactorXY;                                       // 0x0338(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RotationFactorXY;                                  // 0x0350(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoomFactor;                                        // 0x0368(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PanSpeed;                                          // 0x036C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RotationSensitivity;                               // 0x0370(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinVerticalRotation;                               // 0x0374(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxVerticalRotation;                               // 0x0378(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ZoomSpeed;                                         // 0x037C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DefaultZoomDistance;                               // 0x0380(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinZoomDistance;                                   // 0x0384(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxZoomDistance;                                   // 0x0388(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinFocalDistance;                                  // 0x038C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxFocalDistance;                                  // 0x0390(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AspectRatio;                                       // 0x0394(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ExposureBias;                                      // 0x0398(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FieldOfView;                                       // 0x039C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RollAngle;                                         // 0x03A0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bUseDepthOfField;                                  // 0x03A4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A5[0x3];                                      // 0x03A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlurAmount;                                        // 0x03A8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bUseAutoFocus;                                     // 0x03AC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3AD[0x3];                                      // 0x03AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AutoFocusOffsetXY;                                 // 0x03B0(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShowAutoFocusTarget;                              // 0x03C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABhvrAssetViewSocket*                   AssetSocket;                                       // 0x03D0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3D8[0x30];                                     // 0x03D8(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PickFocusWithCursor();
	void PickPivotWithCursor();
	void ResetPivot(bool bAllowCameraLag);
	void ResetRotation(bool bAllowCameraLag);
	void ResetZoom(bool bAllowCameraLag);
	void SetAspectRatio(float NewAspectRatio);
	void SetAutoFocusOffset(const struct FVector& NewFocusTargetOffsetXY);
	void SetBlurAmount(float NewBlurAmount);
	void SetExposureBias(float NewExposureBias);
	void SetFieldOfView(float NewFieldOfView);
	void SetRollAngle(float NewRollAngle);
	void SetShowAutoFocusTarget(bool bNewValue);
	void SetUseAutoFocus(bool bNewValue);
	void SetUseDepthOfField(bool bNewValue);
	void ZoomFit(const struct FVector& CenterOfMass, const struct FBox& Bounds, const struct FVector& Padding);

	float GetAspectRatio() const;
	float GetExposureBias() const;
	float GetFieldOfView() const;
	float GetRollAngle() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BhvrAssetViewCamera">();
	}
	static class ABhvrAssetViewCamera* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABhvrAssetViewCamera>();
	}
};

// Class BhvrAssetViewer.BhvrAssetViewCameraSequenceSystem
// 0x00B0 (0x0350 - 0x02A0)
class ABhvrAssetViewCameraSequenceSystem final : public AActor
{
public:
	struct FDirectoryPath                         SequencesPath;                                     // 0x02A0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              CameraSequencesChanged;                            // 0x02B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              SelectedCameraSequenceChanged;                     // 0x02C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              HasActiveSequenceChanged;                          // 0x02D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              PlaybackPositionChanged;                           // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FBhvrAssetViewCameraSequence>   CameraSequences;                                   // 0x02F0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_300[0x10];                                     // 0x0300(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBhvrAssetViewCameraSequence           SelectedSequence;                                  // 0x0310(0x0020)(Transient, NativeAccessSpecifierPrivate)
	class FString                                 SelectedCameraSequence;                            // 0x0330(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PlaybackPosition;                                  // 0x0340(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MaxPlaybackPosition;                               // 0x0344(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsLooping;                                        // 0x0348(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void LoadSequences(const TArray<struct FAssetData>& SequenceAssetDatas);
	void PauseSequence();
	void PlaySequence();
	void RecordSequence(const class FString& Filename, class UMoviePipelinePrimaryConfig* Configuration);
	void RestartSequence();
	void SelectCameraSequence(const class FString& DisplayName);
	void SetIsLooping(bool bNewValue);
	void SetPlaybackPosition(int32 NewPlaybackPosition);
	void StopSequence();

	bool GetIsLooping() const;
	int32 GetMaxPlaybackPosition() const;
	int32 GetPlaybackPosition() const;
	class FString GetSelectedCameraSequenceName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BhvrAssetViewCameraSequenceSystem">();
	}
	static class ABhvrAssetViewCameraSequenceSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABhvrAssetViewCameraSequenceSystem>();
	}
};

// Class BhvrAssetViewer.BhvrAssetViewController
// 0x0018 (0x0048 - 0x0030)
class UBhvrAssetViewController final : public UObject
{
public:
	TMulticastInlineDelegate<void(bool bNewValue)> LoadingStateChanged;                              // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bIsLoading;                                        // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CalculateBounds(struct FVector* OutCenterOfMass, struct FBox* OutBounds) const;
	class FString GetScreenshotName() const;
	bool IsLoading() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BhvrAssetViewController">();
	}
	static class UBhvrAssetViewController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBhvrAssetViewController>();
	}
};

// Class BhvrAssetViewer.BhvrAssetViewData
// 0x0038 (0x0068 - 0x0030)
class UBhvrAssetViewData final : public UObject
{
public:
	TMulticastInlineDelegate<void(bool bNewValue)> LoadingStateChanged;                              // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DisplayName;                                       // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsLoading;                                        // 0x0060(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FString GetDisplayName() const;
	class FString GetId() const;
	bool IsLoading() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BhvrAssetViewData">();
	}
	static class UBhvrAssetViewData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBhvrAssetViewData>();
	}
};

// Class BhvrAssetViewer.BhvrAssetViewDataSource
// 0x00B0 (0x00E0 - 0x0030)
class UBhvrAssetViewDataSource final : public UObject
{
public:
	TMulticastInlineDelegate<void(bool bNewValue)> LoadingStateChanged;                              // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UBhvrAssetViewData* OldAssetViewData, class UBhvrAssetViewData* NewAssetViewData)> AssetViewDataSelectionStateChanged; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DisplayName;                                       // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FBhvrAssetViewOption>           AssetViewDataOptions;                              // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<class FString, class UBhvrAssetViewData*> AssetViewDatas;                                   // 0x0080(0x0050)(Transient, NativeAccessSpecifierPrivate)
	bool                                          bIsLoading;                                        // 0x00D0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBhvrAssetViewData*                     SelectedAssetViewData;                             // 0x00D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UBhvrAssetViewData* GetSelectedAssetViewData();
	void SelectAssetViewData(const class FString& AssetViewDataId);

	class FString GetDisplayName() const;
	class FString GetId() const;
	bool IsLoading() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BhvrAssetViewDataSource">();
	}
	static class UBhvrAssetViewDataSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBhvrAssetViewDataSource>();
	}
};

// Class BhvrAssetViewer.BhvrAssetViewer
// 0x00D0 (0x0370 - 0x02A0)
class ABhvrAssetViewer final : public AActor
{
public:
	TMulticastInlineDelegate<void(bool bNewValue)> LoadingStateChanged;                              // 0x02A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UBhvrAssetViewDataSource* OldAssetViewDataSource, class UBhvrAssetViewDataSource* NewAssetViewDataSource)> AssetViewDataSourceSelectionStateChanged; // 0x02B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UBhvrAssetViewController* OldAssetViewController, class UBhvrAssetViewController* NewAssetViewController)> AssetViewControllerSelectionStateChanged; // 0x02C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UBhvrAssetViewDataSource>   AssetViewDataSourceBaseClass;                      // 0x02D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UBhvrAssetViewController>   AssetViewControllerBaseClass;                      // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ABhvrAssetViewSocket*                   AssetSocket;                                       // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FBhvrAssetViewOption>           AssetViewDataSourceOptions;                        // 0x02E8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TMap<class FString, class UBhvrAssetViewDataSource*> AssetViewDataSources;                       // 0x02F8(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TArray<class UBhvrAssetViewController*>       AssetViewControllers;                              // 0x0348(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_358[0x4];                                      // 0x0358(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsLoading;                                        // 0x035C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_35D[0x3];                                      // 0x035D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBhvrAssetViewDataSource*               SelectedAssetViewDataSource;                       // 0x0360(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBhvrAssetViewController*               SelectedAssetViewController;                       // 0x0368(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void BeginPlay();
	void OnSelectedAssetViewDataChanged(class UBhvrAssetViewData* OldAssetViewData, class UBhvrAssetViewData* NewAssetViewData);
	void SelectAssetViewDataSource(const class FString& AssetViewDataSourceId);

	const class UBhvrAssetViewController* GetSelectedAssetViewController() const;
	const class UBhvrAssetViewDataSource* GetSelectedAssetViewDataSource() const;
	bool IsLoading() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BhvrAssetViewer">();
	}
	static class ABhvrAssetViewer* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABhvrAssetViewer>();
	}
};

// Class BhvrAssetViewer.BhvrAssetViewScreenshotSystem
// 0x00C8 (0x0368 - 0x02A0)
class ABhvrAssetViewScreenshotSystem final : public AActor
{
public:
	struct FDirectoryPath                         ScreenshotsPath;                                   // 0x02A0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FString, class FString>            CVarOverrideValues;                                // 0x02B0(0x0050)(Edit, NativeAccessSpecifierPrivate)
	struct FBhvrBufferVisualizationMaterials      BufferVisualizationMaterials;                      // 0x0300(0x0010)(Edit, NativeAccessSpecifierPrivate)
	uint8                                         Pad_310[0x58];                                     // 0x0310(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void GetBufferVisualizationMaterialNames(TArray<class FString>* InOutBufferVisualizationMaterialNames);

	void CaptureScreen(const class FString& Filename, const struct FIntVector& ResolutionXY, const struct FBhvrScreenshotCaptureRegion& CaptureRegion);
	bool IsBufferVisualizationMaterialEnabled(const class FString& BufferVisualizationMaterialName);
	void SetBufferVisualizationMaterialEnabled(const class FString& BufferVisualizationMaterialName, bool bIsEnabled);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BhvrAssetViewScreenshotSystem">();
	}
	static class ABhvrAssetViewScreenshotSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABhvrAssetViewScreenshotSystem>();
	}
};

// Class BhvrAssetViewer.BhvrAssetViewSocket
// 0x0050 (0x02F0 - 0x02A0)
class ABhvrAssetViewSocket final : public ATargetPoint
{
public:
	TMulticastInlineDelegate<void()>              AssetTransformChanged;                             // 0x02A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              AutoRotateEnabledChanged;                          // 0x02B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              AutoRotateDirectionChanged;                        // 0x02C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              AutoRotateSpeedChanged;                            // 0x02D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UBhvrAssetViewSpringArmComponent*       SpringArm;                                         // 0x02E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bAutoRotateEnabled;                                // 0x02E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EBhvrAssetViewRotation                        AutoRotateDirection;                               // 0x02E9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2EA[0x2];                                      // 0x02EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoRotateSpeed;                                   // 0x02EC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetAssetLocation(const struct FVector& NewLocation);
	void SetAssetRotation(const struct FRotator& NewRotation);
	void SetAutoRotateDirection(EBhvrAssetViewRotation NewDirection);
	void SetAutoRotateEnabled(bool bNewValue);
	void SetAutoRotateSpeed(float NewSpeed);

	const struct FTransform GetAssetTransform() const;
	EBhvrAssetViewRotation GetAutoRotateDirection() const;
	bool GetAutoRotateEnabled() const;
	float GetAutoRotateSpeed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BhvrAssetViewSocket">();
	}
	static class ABhvrAssetViewSocket* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABhvrAssetViewSocket>();
	}
};

// Class BhvrAssetViewer.BhvrAssetViewSpringArmComponent
// 0x0010 (0x03E0 - 0x03D0)
class UBhvrAssetViewSpringArmComponent final : public USpringArmComponent
{
public:
	uint8                                         Pad_3D0[0x10];                                     // 0x03D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BhvrAssetViewSpringArmComponent">();
	}
	static class UBhvrAssetViewSpringArmComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBhvrAssetViewSpringArmComponent>();
	}
};

// Class BhvrAssetViewer.BhvrWatermarkComponent
// 0x0040 (0x0610 - 0x05D0)
class UBhvrWatermarkComponent final : public UBillboardComponent
{
public:
	struct FVector                                WatermarkLocation;                                 // 0x05C8(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                WatermarkOffset;                                   // 0x05E0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	double                                        WatermarkSize;                                     // 0x05F8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsWatermarkHidden;                                // 0x0600(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_601[0xF];                                      // 0x0601(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FVector GetWatermarkLocation();
	void SetWatermarkHidden(bool bNewHidden);
	void SetWatermarkLocation(const struct FVector& NewLocation);
	void SetWatermarkSize(double NewSize);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BhvrWatermarkComponent">();
	}
	static class UBhvrWatermarkComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBhvrWatermarkComponent>();
	}
};

}

