#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ControlRig

#include "Basic.hpp"

#include "MovieSceneTracks_structs.hpp"
#include "MovieSceneTracks_classes.hpp"
#include "ControlRig_structs.hpp"
#include "LevelSequence_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Constraints_structs.hpp"
#include "Constraints_classes.hpp"
#include "RigVM_classes.hpp"
#include "Engine_classes.hpp"
#include "MovieScene_structs.hpp"
#include "MovieScene_classes.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class ControlRig.ControlRigShapeActor
// 0x0058 (0x02F8 - 0x02A0)
class AControlRigShapeActor final : public AActor
{
public:
	class USceneComponent*                        ActorRootComponent;                                // 0x02A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ControlRigIndex;                                   // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UControlRig>             ControlRig;                                        // 0x02B4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ControlName;                                       // 0x02BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShapeName;                                         // 0x02C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ColorParameterName;                                // 0x02D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E0[0x10];                                     // 0x02E0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bSelected : 1;                                     // 0x02F0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bHovered : 1;                                      // 0x02F0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEnabledChanged(bool bIsEnabled);
	void OnHoveredChanged(bool bIsSelected);
	void OnManipulatingChanged(bool bIsManipulating);
	void OnSelectionChanged(bool bIsSelected);
	void OnTransformChanged(const struct FTransform& NewTransform);
	void SetEnabled(bool bInEnabled);
	void SetGlobalTransform(const struct FTransform& InTransform);
	void SetHovered(bool bInHovered);
	void SetSelectable(bool bInSelectable);
	void SetSelected(bool bInSelected);

	struct FTransform GetGlobalTransform() const;
	bool IsEnabled() const;
	bool IsHovered() const;
	bool IsSelectedInEditor() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigShapeActor">();
	}
	static class AControlRigShapeActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AControlRigShapeActor>();
	}
};

// Class ControlRig.RigHierarchy
// 0x0350 (0x0380 - 0x0030)
class alignas(0x10) URigHierarchy final : public UObject
{
public:
	uint8                                         Pad_30[0x60];                                      // 0x0030(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        TopologyVersion;                                   // 0x0090(0x0002)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint16                                        MetadataVersion;                                   // 0x0092(0x0002)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint16                                        MetadataTagVersion;                                // 0x0094(0x0002)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bEnableDirtyPropagation;                           // 0x0096(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_97[0x99];                                      // 0x0097(0x0099)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TransformStackIndex;                               // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_134[0x74];                                     // 0x0134(0x0074)(Fixing Size After Last Property [ Dumper-7 ])
	class URigHierarchyController*                HierarchyController;                               // 0x01A8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B0[0x58];                                     // 0x01B0(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FRigElementKey, struct FRigElementKey> PreviousNameMap;                              // 0x0208(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_258[0x80];                                     // 0x0258(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	class URigHierarchy*                          HierarchyForCacheValidation;                       // 0x02D8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E0[0xA0];                                     // 0x02E0(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FEulerTransform GetEulerTransformFromControlValue(const struct FRigControlValue& InValue);
	static float GetFloatFromControlValue(const struct FRigControlValue& InValue);
	static int32 GetIntFromControlValue(const struct FRigControlValue& InValue);
	static struct FRotator GetRotatorFromControlValue(const struct FRigControlValue& InValue);
	static struct FTransform GetTransformFromControlValue(const struct FRigControlValue& InValue);
	static struct FTransformNoScale GetTransformNoScaleFromControlValue(const struct FRigControlValue& InValue);
	static struct FVector2D GetVector2DFromControlValue(const struct FRigControlValue& InValue);
	static struct FVector GetVectorFromControlValue(const struct FRigControlValue& InValue);
	static struct FRigControlValue MakeControlValueFromBool(bool InValue);
	static struct FRigControlValue MakeControlValueFromEulerTransform(const struct FEulerTransform& InValue);
	static struct FRigControlValue MakeControlValueFromFloat(float InValue);
	static struct FRigControlValue MakeControlValueFromInt(int32 InValue);
	static struct FRigControlValue MakeControlValueFromRotator(const struct FRotator& InValue);
	static struct FRigControlValue MakeControlValueFromTransform(const struct FTransform& InValue);
	static struct FRigControlValue MakeControlValueFromTransformNoScale(const struct FTransformNoScale& InValue);
	static struct FRigControlValue MakeControlValueFromVector(const struct FVector& InValue);
	static struct FRigControlValue MakeControlValueFromVector2D(const struct FVector2D& InValue);

	void CopyHierarchy(class URigHierarchy* InHierarchy);
	void CopyPose(class URigHierarchy* InHierarchy, bool bCurrent, bool bInitial, bool bWeights, bool bMatchPoseInGlobalIfNeeded);
	class URigHierarchyController* GetController(bool bCreateIfNeeded);
	TArray<class FName> GetMetadataNames(const struct FRigElementKey& InItem);
	ERigMetadataType GetMetadataType(const struct FRigElementKey& InItem, class FName InMetadataName);
	bool RemoveAllMetadata(const struct FRigElementKey& InItem);
	bool RemoveMetadata(const struct FRigElementKey& InItem, class FName InMetadataName);
	void Reset();
	void ResetCurveValues();
	void ResetPoseToInitial(ERigElementType InTypeFilter);
	void ResetToDefault();
	void SendAutoKeyEvent(const struct FRigElementKey& InElement, float InOffsetInSeconds, bool bAsynchronous);
	bool SetBoolArrayMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, const TArray<bool>& InValue);
	bool SetBoolMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, bool InValue);
	void SetControlOffsetTransform(const struct FRigElementKey& InKey, const struct FTransform& InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo, bool bPrintPythonCommands);
	void SetControlOffsetTransformByIndex(int32 InElementIndex, const struct FTransform& InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo, bool bPrintPythonCommands);
	void SetControlPreferredRotator(const struct FRigElementKey& InKey, const struct FRotator& InValue, bool bInitial, bool bFixEulerFlips);
	void SetControlPreferredRotatorByIndex(int32 InElementIndex, const struct FRotator& InValue, bool bInitial, bool bFixEulerFlips);
	void SetControlSettings(const struct FRigElementKey& InKey, const struct FRigControlSettings& InSettings, bool bSetupUndo, bool bForce, bool bPrintPythonCommands);
	void SetControlSettingsByIndex(int32 InElementIndex, const struct FRigControlSettings& InSettings, bool bSetupUndo, bool bForce, bool bPrintPythonCommands);
	void SetControlShapeTransform(const struct FRigElementKey& InKey, const struct FTransform& InTransform, bool bInitial, bool bSetupUndo);
	void SetControlShapeTransformByIndex(int32 InElementIndex, const struct FTransform& InTransform, bool bInitial, bool bSetupUndo);
	void SetControlValue(const struct FRigElementKey& InKey, const struct FRigControlValue& InValue, ERigControlValueType InValueType, bool bSetupUndo, bool bPrintPythonCommands);
	void SetControlValueByIndex(int32 InElementIndex, const struct FRigControlValue& InValue, ERigControlValueType InValueType, bool bSetupUndo, bool bPrintPythonCommands);
	void SetControlVisibility(const struct FRigElementKey& InKey, bool bVisibility);
	void SetControlVisibilityByIndex(int32 InElementIndex, bool bVisibility);
	void SetCurveValue(const struct FRigElementKey& InKey, float InValue, bool bSetupUndo);
	void SetCurveValueByIndex(int32 InElementIndex, float InValue, bool bSetupUndo);
	bool SetFloatArrayMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, const TArray<float>& InValue);
	bool SetFloatMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, float InValue);
	void SetGlobalTransform(const struct FRigElementKey& InKey, const struct FTransform& InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo, bool bPrintPythonCommand);
	void SetGlobalTransformByIndex(int32 InElementIndex, const struct FTransform& InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo, bool bPrintPythonCommand);
	bool SetInt32ArrayMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, const TArray<int32>& InValue);
	bool SetInt32Metadata(const struct FRigElementKey& InItem, class FName InMetadataName, int32 InValue);
	bool SetLinearColorArrayMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, const TArray<struct FLinearColor>& InValue);
	bool SetLinearColorMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, const struct FLinearColor& InValue);
	void SetLocalTransform(const struct FRigElementKey& InKey, const struct FTransform& InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo, bool bPrintPythonCommands);
	void SetLocalTransformByIndex(int32 InElementIndex, const struct FTransform& InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo, bool bPrintPythonCommands);
	bool SetNameArrayMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, const TArray<class FName>& InValue);
	bool SetNameMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, class FName InValue);
	bool SetParentWeight(const struct FRigElementKey& InChild, const struct FRigElementKey& InParent, const struct FRigElementWeight& InWeight, bool bInitial, bool bAffectChildren);
	bool SetParentWeightArray(const struct FRigElementKey& InChild, const TArray<struct FRigElementWeight>& InWeights, bool bInitial, bool bAffectChildren);
	void SetPose_ForBlueprint(const struct FRigPose& InPose);
	bool SetQuatArrayMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, const TArray<struct FQuat>& InValue);
	bool SetQuatMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, const struct FQuat& InValue);
	bool SetRigElementKeyArrayMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, const TArray<struct FRigElementKey>& InValue);
	bool SetRigElementKeyMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, const struct FRigElementKey& InValue);
	bool SetRotatorArrayMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, const TArray<struct FRotator>& InValue);
	bool SetRotatorMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, const struct FRotator& InValue);
	bool SetTag(const struct FRigElementKey& InItem, class FName InTag);
	bool SetTransformArrayMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, const TArray<struct FTransform>& InValue);
	bool SetTransformMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, const struct FTransform& InValue);
	bool SetVectorArrayMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, const TArray<struct FVector>& InValue);
	bool SetVectorMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, const struct FVector& InValue);
	bool SwitchToDefaultParent(const struct FRigElementKey& InChild, bool bInitial, bool bAffectChildren);
	bool SwitchToParent(const struct FRigElementKey& InChild, const struct FRigElementKey& InParent, bool bInitial, bool bAffectChildren);
	bool SwitchToWorldSpace(const struct FRigElementKey& InChild, bool bInitial, bool bAffectChildren);
	void UnsetCurveValue(const struct FRigElementKey& InKey, bool bSetupUndo);
	void UnsetCurveValueByIndex(int32 InElementIndex, bool bSetupUndo);

	bool Contains_ForBlueprint(const struct FRigElementKey& InKey) const;
	struct FRigBoneElement FindBone_ForBlueprintOnly(const struct FRigElementKey& InKey) const;
	struct FRigControlElement FindControl_ForBlueprintOnly(const struct FRigElementKey& InKey) const;
	struct FRigNullElement FindNull_ForBlueprintOnly(const struct FRigElementKey& InKey) const;
	TArray<struct FRigElementKey> GetAllKeys_ForBlueprint(bool bTraverse) const;
	TArray<struct FRigElementKey> GetBoneKeys(bool bTraverse) const;
	TArray<bool> GetBoolArrayMetadata(const struct FRigElementKey& InItem, class FName InMetadataName) const;
	bool GetBoolMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, bool defaultValue) const;
	TArray<struct FRigElementKey> GetChildren(const struct FRigElementKey& InKey, bool bRecursive) const;
	TArray<struct FRigElementKey> GetControlKeys(bool bTraverse) const;
	struct FRotator GetControlPreferredRotator(const struct FRigElementKey& InKey, bool bInitial) const;
	struct FRotator GetControlPreferredRotatorByIndex(int32 InElementIndex, bool bInitial) const;
	struct FRigControlValue GetControlValue(const struct FRigElementKey& InKey, ERigControlValueType InValueType) const;
	struct FRigControlValue GetControlValueByIndex(int32 InElementIndex, ERigControlValueType InValueType) const;
	TArray<struct FRigElementKey> GetCurveKeys() const;
	float GetCurveValue(const struct FRigElementKey& InKey) const;
	float GetCurveValueByIndex(int32 InElementIndex) const;
	struct FRigElementKey GetDefaultParent(const struct FRigElementKey& InKey) const;
	struct FRigElementKey GetFirstParent(const struct FRigElementKey& InKey) const;
	TArray<float> GetFloatArrayMetadata(const struct FRigElementKey& InItem, class FName InMetadataName) const;
	float GetFloatMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, float defaultValue) const;
	struct FTransform GetGlobalControlOffsetTransform(const struct FRigElementKey& InKey, bool bInitial) const;
	struct FTransform GetGlobalControlOffsetTransformByIndex(int32 InElementIndex, bool bInitial) const;
	struct FTransform GetGlobalControlShapeTransform(const struct FRigElementKey& InKey, bool bInitial) const;
	struct FTransform GetGlobalControlShapeTransformByIndex(int32 InElementIndex, bool bInitial) const;
	struct FTransform GetGlobalTransform(const struct FRigElementKey& InKey, bool bInitial) const;
	struct FTransform GetGlobalTransformByIndex(int32 InElementIndex, bool bInitial) const;
	int32 GetIndex_ForBlueprint(const struct FRigElementKey& InKey) const;
	TArray<int32> GetInt32ArrayMetadata(const struct FRigElementKey& InItem, class FName InMetadataName) const;
	int32 GetInt32Metadata(const struct FRigElementKey& InItem, class FName InMetadataName, int32 defaultValue) const;
	struct FRigElementKey GetKey(int32 InElementIndex) const;
	TArray<struct FRigElementKey> GetKeys(const TArray<int32>& InElementIndices) const;
	TArray<struct FLinearColor> GetLinearColorArrayMetadata(const struct FRigElementKey& InItem, class FName InMetadataName) const;
	struct FLinearColor GetLinearColorMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, const struct FLinearColor& defaultValue) const;
	struct FTransform GetLocalControlShapeTransform(const struct FRigElementKey& InKey, bool bInitial) const;
	struct FTransform GetLocalControlShapeTransformByIndex(int32 InElementIndex, bool bInitial) const;
	int32 GetLocalIndex_ForBlueprint(const struct FRigElementKey& InKey) const;
	struct FTransform GetLocalTransform(const struct FRigElementKey& InKey, bool bInitial) const;
	struct FTransform GetLocalTransformByIndex(int32 InElementIndex, bool bInitial) const;
	TArray<class FName> GetNameArrayMetadata(const struct FRigElementKey& InItem, class FName InMetadataName) const;
	class FName GetNameMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, class FName defaultValue) const;
	TArray<struct FRigElementKey> GetNullKeys(bool bTraverse) const;
	int32 GetNumberOfParents(const struct FRigElementKey& InKey) const;
	TArray<struct FRigElementKey> GetParents(const struct FRigElementKey& InKey, bool bRecursive) const;
	struct FTransform GetParentTransform(const struct FRigElementKey& InKey, bool bInitial) const;
	struct FTransform GetParentTransformByIndex(int32 InElementIndex, bool bInitial) const;
	struct FRigElementWeight GetParentWeight(const struct FRigElementKey& InChild, const struct FRigElementKey& InParent, bool bInitial) const;
	TArray<struct FRigElementWeight> GetParentWeightArray(const struct FRigElementKey& InChild, bool bInitial) const;
	struct FRigPose GetPose(bool bInitial) const;
	class FName GetPreviousName(const struct FRigElementKey& InKey) const;
	struct FRigElementKey GetPreviousParent(const struct FRigElementKey& InKey) const;
	TArray<struct FQuat> GetQuatArrayMetadata(const struct FRigElementKey& InItem, class FName InMetadataName) const;
	struct FQuat GetQuatMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, const struct FQuat& defaultValue) const;
	TArray<struct FRigElementKey> GetReferenceKeys(bool bTraverse) const;
	TArray<struct FRigElementKey> GetRigElementKeyArrayMetadata(const struct FRigElementKey& InItem, class FName InMetadataName) const;
	struct FRigElementKey GetRigElementKeyMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, const struct FRigElementKey& defaultValue) const;
	TArray<struct FRigElementKey> GetRigidBodyKeys(bool bTraverse) const;
	TArray<struct FRigElementKey> GetRootElementKeys() const;
	TArray<struct FRotator> GetRotatorArrayMetadata(const struct FRigElementKey& InItem, class FName InMetadataName) const;
	struct FRotator GetRotatorMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, const struct FRotator& defaultValue) const;
	TArray<struct FRigElementKey> GetSelectedKeys(ERigElementType InTypeFilter) const;
	TArray<class FName> GetTags(const struct FRigElementKey& InItem) const;
	TArray<struct FTransform> GetTransformArrayMetadata(const struct FRigElementKey& InItem, class FName InMetadataName) const;
	struct FTransform GetTransformMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, const struct FTransform& defaultValue) const;
	TArray<struct FVector> GetVectorArrayMetadata(const struct FRigElementKey& InItem, class FName InMetadataName) const;
	struct FVector GetVectorMetadata(const struct FRigElementKey& InItem, class FName InMetadataName, const struct FVector& defaultValue) const;
	bool HasTag(const struct FRigElementKey& InItem, class FName InTag) const;
	bool IsControllerAvailable() const;
	bool IsCurveValueSet(const struct FRigElementKey& InKey) const;
	bool IsCurveValueSetByIndex(int32 InElementIndex) const;
	bool IsParentedTo(const struct FRigElementKey& InChild, const struct FRigElementKey& InParent) const;
	bool IsProcedural(const struct FRigElementKey& InKey) const;
	bool IsSelected(const struct FRigElementKey& InKey) const;
	bool IsSelectedByIndex(int32 InIndex) const;
	bool IsValidIndex(int32 InElementIndex) const;
	int32 Num() const;
	TArray<struct FRigElementKey> SortKeys(const TArray<struct FRigElementKey>& InKeys) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigHierarchy">();
	}
	static class URigHierarchy* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigHierarchy>();
	}
};

// Class ControlRig.TransformableControlHandle
// 0x0048 (0x00A8 - 0x0060)
class UTransformableControlHandle final : public UTransformableHandle
{
public:
	TSoftObjectPtr<class UControlRig>             ControlRig;                                        // 0x0060(0x0038)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ControlName;                                       // 0x0098(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TransformableControlHandle">();
	}
	static class UTransformableControlHandle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTransformableControlHandle>();
	}
};

// Class ControlRig.ControlRigComponent
// 0x0160 (0x0700 - 0x05A0)
class UControlRigComponent final : public UPrimitiveComponent
{
public:
	TSubclassOf<class UControlRig>                ControlRigClass;                                   // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UControlRigComponent* Component)> OnPreInitializeDelegate;   // 0x05A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UControlRigComponent* Component)> OnPostInitializeDelegate;  // 0x05B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UControlRigComponent* Component)> OnPreConstructionDelegate; // 0x05C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UControlRigComponent* Component)> OnPostConstructionDelegate; // 0x05D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UControlRigComponent* Component)> OnPreForwardsSolveDelegate; // 0x05E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UControlRigComponent* Component)> OnPostForwardsSolveDelegate; // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FControlRigComponentMappedElement> UserDefinedElements;                            // 0x0608(0x0010)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FControlRigComponentMappedElement> MappedElements;                                 // 0x0618(0x0010)(Edit, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bEnableLazyEvaluation;                             // 0x0628(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_629[0x3];                                      // 0x0629(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LazyEvaluationPositionThreshold;                   // 0x062C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LazyEvaluationRotationThreshold;                   // 0x0630(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LazyEvaluationScaleThreshold;                      // 0x0634(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetTransformBeforeTick;                         // 0x0638(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetInitialsBeforeConstruction;                  // 0x0639(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRigOnTick;                                  // 0x063A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateInEditor;                                   // 0x063B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawBones;                                        // 0x063C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowDebugDrawing;                                 // 0x063D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_63E[0x2];                                      // 0x063E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UControlRig*                            ControlRig;                                        // 0x0640(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_648[0xB8];                                     // 0x0648(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddMappedCompleteSkeletalMesh(class USkeletalMeshComponent* SkeletalMeshComponent);
	void AddMappedComponents(const TArray<struct FControlRigComponentMappedComponent>& Components);
	void AddMappedElements(const TArray<struct FControlRigComponentMappedElement>& NewMappedElements);
	void AddMappedSkeletalMesh(class USkeletalMeshComponent* SkeletalMeshComponent, const TArray<struct FControlRigComponentMappedBone>& Bones, const TArray<struct FControlRigComponentMappedCurve>& Curves);
	bool CanExecute();
	void ClearMappedElements();
	bool DoesElementExist(class FName Name_0, ERigElementType ElementType);
	struct FTransform GetBoneTransform(class FName BoneName, EControlRigComponentSpace space);
	bool GetControlBool(class FName ControlName);
	float GetControlFloat(class FName ControlName);
	int32 GetControlInt(class FName ControlName);
	struct FTransform GetControlOffset(class FName ControlName, EControlRigComponentSpace space);
	struct FVector GetControlPosition(class FName ControlName, EControlRigComponentSpace space);
	class UControlRig* GetControlRig();
	struct FRotator GetControlRotator(class FName ControlName, EControlRigComponentSpace space);
	struct FVector GetControlScale(class FName ControlName, EControlRigComponentSpace space);
	struct FTransform GetControlTransform(class FName ControlName, EControlRigComponentSpace space);
	struct FVector2D GetControlVector2D(class FName ControlName);
	TArray<class FName> GetElementNames(ERigElementType ElementType);
	struct FTransform GetInitialBoneTransform(class FName BoneName, EControlRigComponentSpace space);
	struct FTransform GetInitialSpaceTransform(class FName SpaceName, EControlRigComponentSpace space);
	struct FTransform GetSpaceTransform(class FName SpaceName, EControlRigComponentSpace space);
	void Initialize();
	void OnPostConstruction(class UControlRigComponent* Component);
	void OnPostForwardsSolve(class UControlRigComponent* Component);
	void OnPostInitialize(class UControlRigComponent* Component);
	void OnPreConstruction(class UControlRigComponent* Component);
	void OnPreForwardsSolve(class UControlRigComponent* Component);
	void OnPreInitialize(class UControlRigComponent* Component);
	void SetBoneInitialTransformsFromSkeletalMesh(class USkeletalMesh* InSkeletalMesh);
	void SetBoneTransform(class FName BoneName, const struct FTransform& Transform, EControlRigComponentSpace space, float Weight, bool bPropagateToChildren);
	void SetControlBool(class FName ControlName, bool Value);
	void SetControlFloat(class FName ControlName, float Value);
	void SetControlInt(class FName ControlName, int32 Value);
	void SetControlOffset(class FName ControlName, const struct FTransform& OffsetTransform, EControlRigComponentSpace space);
	void SetControlPosition(class FName ControlName, const struct FVector& Value, EControlRigComponentSpace space);
	void SetControlRigClass(TSubclassOf<class UControlRig> InControlRigClass);
	void SetControlRotator(class FName ControlName, const struct FRotator& Value, EControlRigComponentSpace space);
	void SetControlScale(class FName ControlName, const struct FVector& Value, EControlRigComponentSpace space);
	void SetControlTransform(class FName ControlName, const struct FTransform& Value, EControlRigComponentSpace space);
	void SetControlVector2D(class FName ControlName, const struct FVector2D& Value);
	void SetInitialBoneTransform(class FName BoneName, const struct FTransform& InitialTransform, EControlRigComponentSpace space, bool bPropagateToChildren);
	void SetInitialSpaceTransform(class FName SpaceName, const struct FTransform& InitialTransform, EControlRigComponentSpace space);
	void SetMappedElements(const TArray<struct FControlRigComponentMappedElement>& NewMappedElements);
	void SetObjectBinding(class UObject* InObjectToBind);
	void Update(float DeltaTime);

	float GetAbsoluteTime() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigComponent">();
	}
	static class UControlRigComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigComponent>();
	}
};

// Class ControlRig.ControlRigAnimInstance
// 0x0000 (0x0350 - 0x0350)
class UControlRigAnimInstance final : public UAnimInstance
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigAnimInstance">();
	}
	static class UControlRigAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigAnimInstance>();
	}
};

// Class ControlRig.ControlRig
// 0x0278 (0x0400 - 0x0188)
class UControlRig : public URigVMHost
{
public:
	uint8                                         Pad_188[0x8];                                      // 0x0188(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	ERigExecutionType                             ExecutionType;                                     // 0x0190(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191[0x3];                                      // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigHierarchySettings                  HierarchySettings;                                 // 0x0194(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	TMap<struct FRigElementKey, struct FRigControlElementCustomization> ControlCustomizations;       // 0x0198(0x0050)(Protected, NativeAccessSpecifierProtected)
	class URigHierarchy*                          DynamicHierarchy;                                  // 0x01E8(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class UControlRigShapeLibrary>> ShapeLibraries;                            // 0x01F0(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_200[0x18];                                     // 0x0200(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationDataSourceRegistry*           DataSourceRegistry;                                // 0x0218(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_220[0x90];                                     // 0x0220(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigInfluenceMapPerEvent               Influences;                                        // 0x02B0(0x0060)(NativeAccessSpecifierPrivate)
	class UControlRig*                            InteractionRig;                                    // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UControlRig>                InteractionRigClass;                               // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_320[0xC0];                                     // 0x0320(0x00C0)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastSparseDelegateProperty_             OnControlSelected_BP;                              // 0x03E0(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E1[0x1F];                                     // 0x03E1(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static TArray<class UControlRig*> FindControlRigs(class UObject* Outer_0, TSubclassOf<class UControlRig> OptionalClass);

	bool ClearControlSelection();
	class URigHierarchy* GetHierarchy();
	void RequestConstruction();
	void SelectControl(const class FName& InControlName, bool bSelect);
	void SetInteractionRig(class UControlRig* InInteractionRig);
	void SetInteractionRigClass(TSubclassOf<class UControlRig> InInteractionRigClass);

	class UTransformableControlHandle* CreateTransformableControlHandle(class UObject* Outer_0, const class FName& ControlName) const;
	TArray<class FName> CurrentControlSelection() const;
	class AActor* GetHostingActor() const;
	class UControlRig* GetInteractionRig() const;
	TSubclassOf<class UControlRig> GetInteractionRigClass() const;
	bool IsControlSelected(const class FName& InControlName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRig">();
	}
	static class UControlRig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRig>();
	}
};

// Class ControlRig.ControlRigBlueprintGeneratedClass
// 0x0000 (0x03B0 - 0x03B0)
class UControlRigBlueprintGeneratedClass final : public URigVMBlueprintGeneratedClass
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigBlueprintGeneratedClass">();
	}
	static class UControlRigBlueprintGeneratedClass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigBlueprintGeneratedClass>();
	}
};

// Class ControlRig.ControlRigControlActor
// 0x00C8 (0x0368 - 0x02A0)
class AControlRigControlActor final : public AActor
{
public:
	class AActor*                                 ActorToTrack;                                      // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UControlRig>                ControlRigClass;                                   // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRefreshOnTick;                                    // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSelectable;                                     // 0x02B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B2[0x6];                                      // 0x02B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     MaterialOverride;                                  // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ColorParameter;                                    // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Interp, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastShadows;                                      // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        ActorRootComponent;                                // 0x02D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UControlRig>             ControlRig;                                        // 0x02E0(0x0038)(Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ControlNames;                                      // 0x0318(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FTransform>                     ShapeTransforms;                                   // 0x0328(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UStaticMeshComponent*>           Components;                                        // 0x0338(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UMaterialInstanceDynamic*>       Materials;                                         // 0x0348(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	class FName                                   ColorParameterName;                                // 0x0358(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Clear();
	void Refresh();
	void ResetControlActor();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigControlActor">();
	}
	static class AControlRigControlActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AControlRigControlActor>();
	}
};

// Class ControlRig.ControlRigShapeLibrary
// 0x0160 (0x0190 - 0x0030)
class UControlRigShapeLibrary final : public UObject
{
public:
	struct FControlRigShapeDefinition             DefaultShape;                                      // 0x0030(0x00C0)(Edit, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterial>               DefaultMaterial;                                   // 0x00F0(0x0038)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterial>               XRayMaterial;                                      // 0x0128(0x0038)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaterialColorParameter;                            // 0x0160(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FControlRigShapeDefinition>     Shapes;                                            // 0x0170(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_180[0x10];                                     // 0x0180(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigShapeLibrary">();
	}
	static class UControlRigShapeLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigShapeLibrary>();
	}
};

// Class ControlRig.ControlRigTestData
// 0x0130 (0x0160 - 0x0030)
class UControlRigTestData final : public UObject
{
public:
	struct FSoftObjectPath                        ControlRigObjectPath;                              // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FControlRigTestDataFrame               Initial;                                           // 0x0058(0x0090)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FControlRigTestDataFrame>       InputFrames;                                       // 0x00E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FControlRigTestDataFrame>       OutputFrames;                                      // 0x00F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<int32>                                 FramesToSkip;                                      // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	double                                        Tolerance;                                         // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_120[0x40];                                     // 0x0120(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UControlRigTestData* CreateNewAsset(const class FString& InDesiredPackagePath, const class FString& InBlueprintPathName);

	bool Record(class UControlRig* InControlRig, double InRecordingDuration);
	void ReleaseReplay();
	bool SetupReplay(class UControlRig* InControlRig, bool bGroundTruth);

	int32 GetFrameIndexForTime(double InSeconds, bool bInput) const;
	EControlRigTestDataPlaybackMode GetPlaybackMode() const;
	struct FVector2D GetTimeRange(bool bInput) const;
	bool IsRecording() const;
	bool IsReplaying() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigTestData">();
	}
	static class UControlRigTestData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigTestData>();
	}
};

// Class ControlRig.ControlRigValidator
// 0x0040 (0x0070 - 0x0030)
class UControlRigValidator final : public UObject
{
public:
	TArray<class UControlRigValidationPass*>      Passes;                                            // 0x0030(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x30];                                      // 0x0040(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigValidator">();
	}
	static class UControlRigValidator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigValidator>();
	}
};

// Class ControlRig.ControlRigValidationPass
// 0x0000 (0x0030 - 0x0030)
class UControlRigValidationPass : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigValidationPass">();
	}
	static class UControlRigValidationPass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigValidationPass>();
	}
};

// Class ControlRig.AdditiveControlRig
// 0x0010 (0x0410 - 0x0400)
class UAdditiveControlRig final : public UControlRig
{
public:
	uint8                                         Pad_400[0x10];                                     // 0x0400(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AdditiveControlRig">();
	}
	static class UAdditiveControlRig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAdditiveControlRig>();
	}
};

// Class ControlRig.FKControlRig
// 0x0040 (0x0440 - 0x0400)
class UFKControlRig final : public UControlRig
{
public:
	TArray<bool>                                  IsControlActive;                                   // 0x0400(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	EControlRigFKRigExecuteMode                   ApplyMode;                                         // 0x0410(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_411[0x2F];                                     // 0x0411(0x002F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FKControlRig">();
	}
	static class UFKControlRig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFKControlRig>();
	}
};

// Class ControlRig.RigHierarchyController
// 0x0070 (0x00A0 - 0x0030)
class URigHierarchyController final : public UObject
{
public:
	bool                                          bReportWarningsAndErrors;                          // 0x0030(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class URigHierarchy>           Hierarchy;                                         // 0x0034(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C[0x64];                                      // 0x003C(0x0064)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FRigElementKey AddAnimationChannel_ForBlueprint(class FName InName, const struct FRigElementKey& InParentControl, const struct FRigControlSettings& InSettings, bool bSetupUndo, bool bPrintPythonCommand);
	struct FRigElementKey AddBone(class FName InName, const struct FRigElementKey& InParent, const struct FTransform& InTransform, bool bTransformInGlobal, ERigBoneType InBoneType, bool bSetupUndo, bool bPrintPythonCommand);
	struct FRigElementKey AddControl_ForBlueprint(class FName InName, const struct FRigElementKey& InParent, const struct FRigControlSettings& InSettings, const struct FRigControlValue& InValue, bool bSetupUndo, bool bPrintPythonCommand);
	struct FRigElementKey AddCurve(class FName InName, float InValue, bool bSetupUndo, bool bPrintPythonCommand);
	struct FRigElementKey AddNull(class FName InName, const struct FRigElementKey& InParent, const struct FTransform& InTransform, bool bTransformInGlobal, bool bSetupUndo, bool bPrintPythonCommand);
	bool AddParent(const struct FRigElementKey& InChild, const struct FRigElementKey& InParent, float InWeight, bool bMaintainGlobalTransform, bool bSetupUndo);
	struct FRigElementKey AddRigidBody(class FName InName, const struct FRigElementKey& InParent, const struct FRigRigidBodySettings& InSettings, const struct FTransform& InLocalTransform, bool bSetupUndo, bool bPrintPythonCommand);
	bool ClearSelection();
	bool DeselectElement(const struct FRigElementKey& InKey);
	TArray<struct FRigElementKey> DuplicateElements(const TArray<struct FRigElementKey>& InKeys, bool bSelectNewElements, bool bSetupUndo, bool bPrintPythonCommands);
	TArray<struct FRigElementKey> ImportBones(class USkeleton* InSkeleton, class FName InNameSpace, bool bReplaceExistingBones, bool bRemoveObsoleteBones, bool bSelectBones, bool bSetupUndo, bool bPrintPythonCommand);
	TArray<struct FRigElementKey> ImportCurves(class USkeleton* InSkeleton, class FName InNameSpace, bool bSelectCurves, bool bSetupUndo, bool bPrintPythonCommand);
	TArray<struct FRigElementKey> ImportFromText(const class FString& InContent, bool bReplaceExistingElements, bool bSelectNewElements, bool bSetupUndo, bool bPrintPythonCommands);
	TArray<struct FRigElementKey> MirrorElements(const TArray<struct FRigElementKey>& InKeys, const struct FRigVMMirrorSettings& InSettings, bool bSelectNewElements, bool bSetupUndo, bool bPrintPythonCommands);
	bool RemoveAllParents(const struct FRigElementKey& InChild, bool bMaintainGlobalTransform, bool bSetupUndo, bool bPrintPythonCommand);
	bool RemoveElement(const struct FRigElementKey& InElement, bool bSetupUndo, bool bPrintPythonCommand);
	bool RemoveParent(const struct FRigElementKey& InChild, const struct FRigElementKey& InParent, bool bMaintainGlobalTransform, bool bSetupUndo, bool bPrintPythonCommand);
	struct FRigElementKey RenameElement(const struct FRigElementKey& InElement, class FName InName, bool bSetupUndo, bool bPrintPythonCommand, bool bClearSelection);
	bool ReorderElement(const struct FRigElementKey& InElement, int32 InIndex, bool bSetupUndo, bool bPrintPythonCommand);
	bool SelectElement(const struct FRigElementKey& InKey, bool bSelect, bool bClearSelection);
	class FName SetDisplayName(const struct FRigElementKey& InControl, class FName InDisplayName, bool bRenameElement, bool bSetupUndo, bool bPrintPythonCommand);
	void SetHierarchy(class URigHierarchy* InHierarchy);
	bool SetParent(const struct FRigElementKey& InChild, const struct FRigElementKey& InParent, bool bMaintainGlobalTransform, bool bSetupUndo, bool bPrintPythonCommand);
	bool SetSelection(const TArray<struct FRigElementKey>& InKeys, bool bPrintPythonCommand);

	class FString ExportSelectionToText() const;
	class FString ExportToText(const TArray<struct FRigElementKey>& InKeys) const;
	struct FRigControlSettings GetControlSettings(const struct FRigElementKey& InKey) const;
	class URigHierarchy* GetHierarchy() const;
	bool SetControlSettings(const struct FRigElementKey& InKey, const struct FRigControlSettings& InSettings, bool bSetupUndo) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigHierarchyController">();
	}
	static class URigHierarchyController* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigHierarchyController>();
	}
};

// Class ControlRig.ControlRigLayerInstance
// 0x0010 (0x0360 - 0x0350)
class UControlRigLayerInstance final : public UAnimInstance
{
public:
	uint8                                         Pad_350[0x10];                                     // 0x0350(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigLayerInstance">();
	}
	static class UControlRigLayerInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigLayerInstance>();
	}
};

// Class ControlRig.ControlRigObjectHolder
// 0x0010 (0x0040 - 0x0030)
class UControlRigObjectHolder final : public UObject
{
public:
	TArray<class UObject*>                        Objects;                                           // 0x0030(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigObjectHolder">();
	}
	static class UControlRigObjectHolder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigObjectHolder>();
	}
};

// Class ControlRig.ControlRigSequence
// 0x0078 (0x02A0 - 0x0228)
class UControlRigSequence final : public ULevelSequence
{
public:
	TSoftObjectPtr<class UAnimSequence>           LastExportedToAnimationSequence;                   // 0x0228(0x0038)(AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           LastExportedUsingSkeletalMesh;                     // 0x0260(0x0038)(AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastExportedFrameRate;                             // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigSequence">();
	}
	static class UControlRigSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigSequence>();
	}
};

// Class ControlRig.MovieSceneControlRigParameterSection
// 0x0278 (0x03D8 - 0x0160)
class UMovieSceneControlRigParameterSection final : public UMovieSceneParameterSection
{
public:
	uint8                                         Pad_160[0x48];                                     // 0x0160(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class UControlRig*                            ControlRig;                                        // 0x01A8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UControlRig>                ControlRigClass;                                   // 0x01B0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  ControlsMask;                                      // 0x01B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMovieSceneTransformMask               TransformMask;                                     // 0x01C8(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneFloatChannel                Weight;                                            // 0x01D0(0x0110)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FChannelMapInfo>     ControlChannelMap;                                 // 0x02E0(0x0050)(NativeAccessSpecifierPublic)
	TArray<struct FEnumParameterNameAndCurve>     EnumParameterNamesAndCurves;                       // 0x0330(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FIntegerParameterNameAndCurve>  IntegerParameterNamesAndCurves;                    // 0x0340(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FSpaceControlNameAndChannel>    SpaceChannels;                                     // 0x0350(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FConstraintAndActiveChannel>    ConstraintsChannels;                               // 0x0360(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_370[0x68];                                     // 0x0370(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneControlRigParameterSection">();
	}
	static class UMovieSceneControlRigParameterSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneControlRigParameterSection>();
	}
};

// Class ControlRig.MovieSceneControlRigParameterTrack
// 0x0070 (0x0110 - 0x00A0)
class UMovieSceneControlRigParameterTrack final : public UMovieSceneNameableTrack
{
public:
	uint8                                         Pad_A0[0x40];                                      // 0x00A0(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class UControlRig*                            ControlRig;                                        // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMovieSceneSection*                     SectionToKey;                                      // 0x00E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x00F0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	class FName                                   TrackName;                                         // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneControlRigParameterTrack">();
	}
	static class UMovieSceneControlRigParameterTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneControlRigParameterTrack>();
	}
};

// Class ControlRig.ControlRigSettings
// 0x0000 (0x0048 - 0x0048)
class UControlRigSettings final : public UDeveloperSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigSettings">();
	}
	static class UControlRigSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigSettings>();
	}
};

// Class ControlRig.ControlRigEditorSettings
// 0x0000 (0x0048 - 0x0048)
class UControlRigEditorSettings final : public UDeveloperSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigEditorSettings">();
	}
	static class UControlRigEditorSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigEditorSettings>();
	}
};

// Class ControlRig.ControlRigPoseAsset
// 0x0060 (0x0090 - 0x0030)
class UControlRigPoseAsset final : public UObject
{
public:
	struct FControlRigControlPose                 Pose;                                              // 0x0030(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void GetCurrentPose(class UControlRig* InControlRig, struct FControlRigControlPose* OutPose);
	void PastePose(class UControlRig* InControlRig, bool bDoKey, bool bDoMirror);
	void ReplaceControlName(const class FName& CurrentName, const class FName& NewName);
	void SavePose(class UControlRig* InControlRig, bool bUseAll);
	void SelectControls(class UControlRig* InControlRig, bool bDoMirror);

	bool DoesMirrorMatch(class UControlRig* ControlRig, const class FName& ControlName) const;
	TArray<class FName> GetControlNames() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigPoseAsset">();
	}
	static class UControlRigPoseAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigPoseAsset>();
	}
};

// Class ControlRig.ControlRigPoseMirrorSettings
// 0x0028 (0x0058 - 0x0030)
class UControlRigPoseMirrorSettings final : public UObject
{
public:
	class FString                                 RightSide;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeftSide;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         MirrorAxis;                                        // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         AxisToFlip;                                        // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigPoseMirrorSettings">();
	}
	static class UControlRigPoseMirrorSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigPoseMirrorSettings>();
	}
};

// Class ControlRig.ControlRigPoseProjectSettings
// 0x0010 (0x0040 - 0x0030)
class UControlRigPoseProjectSettings final : public UObject
{
public:
	TArray<struct FDirectoryPath>                 RootSaveDirs;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigPoseProjectSettings">();
	}
	static class UControlRigPoseProjectSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigPoseProjectSettings>();
	}
};

// Class ControlRig.ControlRigSnapSettings
// 0x0008 (0x0038 - 0x0030)
class UControlRigSnapSettings final : public UObject
{
public:
	bool                                          bKeepOffset;                                       // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSnapPosition;                                     // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSnapRotation;                                     // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSnapScale;                                        // 0x0033(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigSnapSettings">();
	}
	static class UControlRigSnapSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigSnapSettings>();
	}
};

// Class ControlRig.ControlRigWorkflowOptions
// 0x0018 (0x00C0 - 0x00A8)
class UControlRigWorkflowOptions : public URigVMUserWorkflowOptions
{
public:
	class URigHierarchy*                          Hierarchy;                                         // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRigElementKey>                 Selection;                                         // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	bool EnsureAtLeastOneRigElementSelected() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigWorkflowOptions">();
	}
	static class UControlRigWorkflowOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigWorkflowOptions>();
	}
};

// Class ControlRig.ControlRigTransformWorkflowOptions
// 0x0008 (0x00C8 - 0x00C0)
class UControlRigTransformWorkflowOptions final : public UControlRigWorkflowOptions
{
public:
	ERigTransformType                             TransformType;                                     // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<struct FRigVMUserWorkflow> ProvideWorkflows(const class UObject* InSubject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigTransformWorkflowOptions">();
	}
	static class UControlRigTransformWorkflowOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigTransformWorkflowOptions>();
	}
};

// Class ControlRig.ControlRigNumericalValidationPass
// 0x00A0 (0x00D0 - 0x0030)
class UControlRigNumericalValidationPass final : public UControlRigValidationPass
{
public:
	bool                                          bCheckControls;                                    // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckBones;                                       // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckCurves;                                      // 0x0032(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TranslationPrecision;                              // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationPrecision;                                 // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScalePrecision;                                    // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurvePrecision;                                    // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventNameA;                                        // 0x0044(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EventNameB;                                        // 0x0050(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigPose                               Pose;                                              // 0x0060(0x0070)(Transient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigNumericalValidationPass">();
	}
	static class UControlRigNumericalValidationPass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigNumericalValidationPass>();
	}
};

}

